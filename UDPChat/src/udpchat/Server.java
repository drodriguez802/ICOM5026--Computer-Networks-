/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

/**
 *
 * @author Daniel
 */
public class Server extends javax.swing.JFrame {
	/**
	 * Creates new form Server
	 */
	static int port;
	static String address;
	static int outgoingBit;
	static DatagramSocket socket;
	static DataInputStream dataIn;
	static DataOutputStream dataOut;

	public Server() {
		try {
			socket = new DatagramSocket();
			initComponents();
			outgoingBit = (int) (Math.random() * 2);
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		jScrollPane1 = new javax.swing.JScrollPane();
		messageArea = new javax.swing.JTextArea();
		messageArea.setText("PORT : " + socket.getLocalPort());
		messageText = new javax.swing.JTextField();
		messageSend = new javax.swing.JButton();
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		messageArea.setColumns(20);
		messageArea.setRows(5);
		jScrollPane1.setViewportView(messageArea);
		messageText.setText("");
		messageSend.setText("SEND");
		messageSend.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				messageSendActionPerformed(evt);
			}
		});
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jScrollPane1)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		messageText,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		282,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		messageSend,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		92,
																		Short.MAX_VALUE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										193,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(messageText)
												.addComponent(
														messageSend,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														74, Short.MAX_VALUE))
								.addContainerGap()));
		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void messageSendActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_messageSendActionPerformed
		try {
			outgoingBit = outgoingBit == 1 ? 0 : 1;
			if (!messageText.getText().equals("")) {
				byte[] outgoingData = new byte[1024];
				InetAddress ip = InetAddress.getByName("127.0.0.1");
				String output = "";
				output = messageText.getText().trim();
				messageArea.setText(messageArea.getText().trim() + "\nMe:  "
						+ output);
				output = outgoingBit + output;
				outgoingData = output.getBytes();
				System.out.println("SERVER: " + outgoingData[0]);
				DatagramPacket outgoingPacket = new DatagramPacket(
						outgoingData, outgoingData.length, ip, port);
				socket.send(outgoingPacket);
				messageText.setText("");
			}
		} catch (IOException ex) {
			Logger.getLogger(Server.class.getName())
					.log(Level.SEVERE, null, ex);
		}
	}// GEN-LAST:event_messageSendActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Server.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Server.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Server.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Server.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Server().setVisible(true);
			}
		});
		try {
			//address = JOptionPane.showInputDialog("Enter the target address:");
			port = Integer.parseInt(JOptionPane
					.showInputDialog("Enter the target port:"));
			int lastPacketBit;
			int packetsNumber = 0;
			int packetsToSync = 5;
			float packetLossRate = 0.2f;
			byte[] incomingData = new byte[1024];			
			DatagramPacket incomingPacket = new DatagramPacket(incomingData,incomingData.length);			
			Queue<DatagramPacket> incomingQueue = new LinkedList<DatagramPacket>();
			incomingQueue.add(incomingPacket);
			while (!new String(incomingPacket.getData()).trim().equals("exit")) {
				boolean synced = packetsNumber>packetsToSync;
				incomingData = new byte[1024];
				incomingPacket = new DatagramPacket(incomingData,incomingData.length);
				
				if(Math.random()>=packetLossRate){
					socket.receive(incomingPacket);
					if(synced){						
					}
					//System.out.println("SYMBOL IS: "+(int)incomingPacket.getData()[0]);
					display(incomingPacket);
					byte[] ackData = new byte[1024];
		            ackData = "ACK".getBytes();
		            InetAddress ip = InetAddress.getByName("127.0.0.1");
					DatagramPacket ackPacket = new DatagramPacket(ackData,ackData.length,ip, port);	
					socket.send(ackPacket);
					System.out.println("#SENT: "+new String(ackPacket.getData()).trim());
					System.out.println("port: "+ackPacket.getPort());
					incomingQueue.add(incomingPacket);					
				}
				else{
					System.out.println("SLEEPING");
					socket.receive(incomingPacket);
					System.out.println("PACKET LOSS WAS: "+new String(incomingPacket.getData()).trim());
					incomingQueue.poll();
					Thread.sleep(1000);
				}
				packetsNumber = packetsNumber + 1;
			}
			System.out.println("EXITING PROGRAM");
			System.exit(0);
		} catch (Exception e) {
		}
	}
	public static void display(DatagramPacket incomingPacket){
		String incomingMessage = new String(incomingPacket.getData());
		messageArea.setText(messageArea.getText().trim()
				+ "\nFriend:  " + incomingMessage.substring(1));
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private static javax.swing.JTextArea messageArea;
	private javax.swing.JButton messageSend;
	private javax.swing.JTextField messageText;
	// End of variables declaration//GEN-END:variables
}